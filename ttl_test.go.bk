package lantern

import (
	"fmt"
	"github.com/cespare/xxhash"
	"testing"
	"time"
)


func TestTTLSelectBucket(t *testing.T) {

	storageBucketFunc := func (t int64) int64 {
		return (t / 5) + 1
	}
	cleanupBucketFunc := func (t int64) int64 {
		return storageBucketFunc(t) - 1
	}

	N := uint64(1e7)
	for i := uint64(0); i < N; i++ {
		//t := time.Now()
		fmt.Printf("time:%ds storageBucket:%d cleanupBucket:%d\n", i, storageBucketFunc(int64(i)), cleanupBucketFunc(int64(i)))
		time.Sleep(time.Second)
	}
}

func TestTTL(t *testing.T) {
	Round := 1 << 4
	N := uint64(1e7)
	Break := false
	ttl := newExpirationMap()

	go func() {
		for !Break{
			ttl.cleanup()
		}
	}()

	for r := 0; r < Round; r++ {
		for i := uint64(0); i < N; i++ {
			key := []byte(randomString(16))
			ttl.add(MemHash(key), xxhash.Sum64(key), time.Now().Add(time.Second*60))
		}
		fmt.Printf("now:%d round %d\n", time.Now().Unix(), r)
		for k, v := range ttl.buckets {
			fmt.Printf(" -- bucket %d keys:%d\n", k, len(v))
		}
	}

	Break = true
	time.Sleep(time.Second * 6)
	fmt.Printf("finish\n")

}
